
TimerPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001c2  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000908  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083e  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000305  00000000  00000000  00001426  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000077  00000000  00000000  00001b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	09 d0       	rcall	.+18     	; 0xc6 <main>
  b4:	84 c0       	rjmp	.+264    	; 0x1be <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <getch>:
#include <util/delay.h>

unsigned int DoReMi[9] = {0, 523, 587, 659, 698, 783,880, 987, 1046};
unsigned char getch(){
	unsigned char data;
	while((UCSR0A & 0x80)==0);
  b8:	5f 9b       	sbis	0x0b, 7	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <getch>
	data=UDR0;
  bc:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
  be:	9b b1       	in	r25, 0x0b	; 11
  c0:	90 68       	ori	r25, 0x80	; 128
  c2:	9b b9       	out	0x0b, r25	; 11
	return data;
}	
  c4:	08 95       	ret

000000c6 <main>:
int main(void)
{
	int input = 0;
	
	DDRB = 0x80;
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	87 bb       	out	0x17, r24	; 23
	//DDRE = 0xfe;
	UCSR0A = 0x00;
  ca:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18;
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
  d6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x03;
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	89 b9       	out	0x09, r24	; 9
	
	TCCR1A = 0x00;
  de:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= 0x19;
  e0:	8e b5       	in	r24, 0x2e	; 46
  e2:	89 61       	ori	r24, 0x19	; 25
  e4:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0x00;
  e6:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCNT1 = 0x0000;
  ea:	1d bc       	out	0x2d, r1	; 45
  ec:	1c bc       	out	0x2c, r1	; 44
	//EICRB = 0xFF;
	//EIMSK = 0xF0;
	//EIFR = 0xF0;
	while(1)
	{
		input = getch()-'0';
  ee:	e4 df       	rcall	.-56     	; 0xb8 <getch>
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	c0 97       	sbiw	r24, 0x30	; 48
		if(input){
  f4:	e1 f3       	breq	.-8      	; 0xee <main+0x28>
			TCCR1A |= 0x0A;
  f6:	2f b5       	in	r18, 0x2f	; 47
  f8:	2a 60       	ori	r18, 0x0A	; 10
  fa:	2f bd       	out	0x2f, r18	; 47
			ICR1 = 7372800/DoReMi[input];
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	fc 01       	movw	r30, r24
 102:	e0 50       	subi	r30, 0x00	; 0
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	20 81       	ld	r18, Z
 108:	31 81       	ldd	r19, Z+1	; 0x01
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e8       	ldi	r23, 0x80	; 128
 112:	80 e7       	ldi	r24, 0x70	; 112
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	15 d0       	rcall	.+42     	; 0x142 <__divmodsi4>
 118:	37 bd       	out	0x27, r19	; 39
 11a:	26 bd       	out	0x26, r18	; 38
			OCR1C = ICR1/2;
 11c:	86 b5       	in	r24, 0x26	; 38
 11e:	97 b5       	in	r25, 0x27	; 39
 120:	96 95       	lsr	r25
 122:	87 95       	ror	r24
 124:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 128:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	8f e3       	ldi	r24, 0x3F	; 63
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x6c>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x76>
 13c:	00 00       	nop
			_delay_ms(100);
			TCCR1A = 0x00;
 13e:	1f bc       	out	0x2f, r1	; 47
 140:	d6 cf       	rjmp	.-84     	; 0xee <main+0x28>

00000142 <__divmodsi4>:
 142:	05 2e       	mov	r0, r21
 144:	97 fb       	bst	r25, 7
 146:	16 f4       	brtc	.+4      	; 0x14c <__divmodsi4+0xa>
 148:	00 94       	com	r0
 14a:	0f d0       	rcall	.+30     	; 0x16a <__negsi2>
 14c:	57 fd       	sbrc	r21, 7
 14e:	05 d0       	rcall	.+10     	; 0x15a <__divmodsi4_neg2>
 150:	14 d0       	rcall	.+40     	; 0x17a <__udivmodsi4>
 152:	07 fc       	sbrc	r0, 7
 154:	02 d0       	rcall	.+4      	; 0x15a <__divmodsi4_neg2>
 156:	46 f4       	brtc	.+16     	; 0x168 <__divmodsi4_exit>
 158:	08 c0       	rjmp	.+16     	; 0x16a <__negsi2>

0000015a <__divmodsi4_neg2>:
 15a:	50 95       	com	r21
 15c:	40 95       	com	r20
 15e:	30 95       	com	r19
 160:	21 95       	neg	r18
 162:	3f 4f       	sbci	r19, 0xFF	; 255
 164:	4f 4f       	sbci	r20, 0xFF	; 255
 166:	5f 4f       	sbci	r21, 0xFF	; 255

00000168 <__divmodsi4_exit>:
 168:	08 95       	ret

0000016a <__negsi2>:
 16a:	90 95       	com	r25
 16c:	80 95       	com	r24
 16e:	70 95       	com	r23
 170:	61 95       	neg	r22
 172:	7f 4f       	sbci	r23, 0xFF	; 255
 174:	8f 4f       	sbci	r24, 0xFF	; 255
 176:	9f 4f       	sbci	r25, 0xFF	; 255
 178:	08 95       	ret

0000017a <__udivmodsi4>:
 17a:	a1 e2       	ldi	r26, 0x21	; 33
 17c:	1a 2e       	mov	r1, r26
 17e:	aa 1b       	sub	r26, r26
 180:	bb 1b       	sub	r27, r27
 182:	fd 01       	movw	r30, r26
 184:	0d c0       	rjmp	.+26     	; 0x1a0 <__udivmodsi4_ep>

00000186 <__udivmodsi4_loop>:
 186:	aa 1f       	adc	r26, r26
 188:	bb 1f       	adc	r27, r27
 18a:	ee 1f       	adc	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	a2 17       	cp	r26, r18
 190:	b3 07       	cpc	r27, r19
 192:	e4 07       	cpc	r30, r20
 194:	f5 07       	cpc	r31, r21
 196:	20 f0       	brcs	.+8      	; 0x1a0 <__udivmodsi4_ep>
 198:	a2 1b       	sub	r26, r18
 19a:	b3 0b       	sbc	r27, r19
 19c:	e4 0b       	sbc	r30, r20
 19e:	f5 0b       	sbc	r31, r21

000001a0 <__udivmodsi4_ep>:
 1a0:	66 1f       	adc	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	88 1f       	adc	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	1a 94       	dec	r1
 1aa:	69 f7       	brne	.-38     	; 0x186 <__udivmodsi4_loop>
 1ac:	60 95       	com	r22
 1ae:	70 95       	com	r23
 1b0:	80 95       	com	r24
 1b2:	90 95       	com	r25
 1b4:	9b 01       	movw	r18, r22
 1b6:	ac 01       	movw	r20, r24
 1b8:	bd 01       	movw	r22, r26
 1ba:	cf 01       	movw	r24, r30
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
