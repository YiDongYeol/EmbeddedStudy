
Doorlock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00000b68  00000bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800172  00800172  00000c6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ca0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e96  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e72  00000000  00000000  00002d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001311  00000000  00000000  00003be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00004ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068c  00000000  00000000  000052b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dd2  00000000  00000000  00005944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00006716  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	07 c3       	rjmp	.+1550   	; 0x624 <__vector_5>
  16:	00 00       	nop
  18:	1b c3       	rjmp	.+1590   	; 0x650 <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 37       	cpi	r26, 0x72	; 114
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e7       	ldi	r26, 0x72	; 114
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 38       	cpi	r26, 0x86	; 134
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	28 d2       	rcall	.+1104   	; 0x514 <main>
  c4:	4f c5       	rjmp	.+2718   	; 0xb64 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <interrupt_init>:
int locked = 1;
int change_wait = 0;
int input;

void interrupt_init(){
	EIMSK = 0xF0;
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	89 bf       	out	0x39, r24	; 57
	EICRB = 0xAA;
  cc:	8a ea       	ldi	r24, 0xAA	; 170
  ce:	8a bf       	out	0x3a, r24	; 58
	sei();
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <check_pass>:
}

int check_pass(){
	int fault=0;
	for(int i=0; i<4; i++){
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	12 c0       	rjmp	.+36     	; 0xfe <check_pass+0x2a>
		if(pass[i]!=pass_input[i]){
  da:	c9 01       	movw	r24, r18
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	fc 01       	movw	r30, r24
  e2:	ee 5f       	subi	r30, 0xFE	; 254
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	40 81       	ld	r20, Z
  e8:	51 81       	ldd	r21, Z+1	; 0x01
  ea:	fc 01       	movw	r30, r24
  ec:	e2 58       	subi	r30, 0x82	; 130
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	80 81       	ld	r24, Z
  f2:	91 81       	ldd	r25, Z+1	; 0x01
  f4:	48 17       	cp	r20, r24
  f6:	59 07       	cpc	r21, r25
  f8:	41 f4       	brne	.+16     	; 0x10a <check_pass+0x36>
	sei();
}

int check_pass(){
	int fault=0;
	for(int i=0; i<4; i++){
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	3f 4f       	sbci	r19, 0xFF	; 255
  fe:	24 30       	cpi	r18, 0x04	; 4
 100:	31 05       	cpc	r19, r1
 102:	5c f3       	brlt	.-42     	; 0xda <check_pass+0x6>
	EICRB = 0xAA;
	sei();
}

int check_pass(){
	int fault=0;
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <check_pass+0x3a>
	for(int i=0; i<4; i++){
		if(pass[i]!=pass_input[i]){
			fault=1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
	if(fault || ind == 5){
 10e:	89 2b       	or	r24, r25
 110:	49 f4       	brne	.+18     	; 0x124 <check_pass+0x50>
 112:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ind>
 116:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ind+0x1>
 11a:	05 97       	sbiw	r24, 0x05	; 5
 11c:	31 f4       	brne	.+12     	; 0x12a <check_pass+0x56>
		return 0;
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	08 95       	ret
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	08 95       	ret
	}
	return 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
}
 12e:	08 95       	ret

00000130 <change_pass>:

int change_pass(){
	int fault=0;
	for(int i=0; i<4; i++){
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0b c0       	rjmp	.+22     	; 0x14c <change_pass+0x1c>
		if(pass_input[i]==99){
 136:	fc 01       	movw	r30, r24
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	e2 58       	subi	r30, 0x82	; 130
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	20 81       	ld	r18, Z
 142:	31 81       	ldd	r19, Z+1	; 0x01
 144:	23 36       	cpi	r18, 0x63	; 99
 146:	31 05       	cpc	r19, r1
 148:	39 f0       	breq	.+14     	; 0x158 <change_pass+0x28>
	return 1;
}

int change_pass(){
	int fault=0;
	for(int i=0; i<4; i++){
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	84 30       	cpi	r24, 0x04	; 4
 14e:	91 05       	cpc	r25, r1
 150:	94 f3       	brlt	.-28     	; 0x136 <change_pass+0x6>
	}
	return 1;
}

int change_pass(){
	int fault=0;
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <change_pass+0x2c>
	for(int i=0; i<4; i++){
		if(pass_input[i]==99){
			fault = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
	if(fault || ind == 5){
 15c:	89 2b       	or	r24, r25
 15e:	49 f4       	brne	.+18     	; 0x172 <change_pass+0x42>
 160:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ind>
 164:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ind+0x1>
 168:	05 97       	sbiw	r24, 0x05	; 5
 16a:	31 f4       	brne	.+12     	; 0x178 <change_pass+0x48>
		return 0;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	08 95       	ret
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	08 95       	ret
	}
	return 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
}
 17c:	08 95       	ret

0000017e <open>:
void open(){
	unlock();
 17e:	64 d4       	rcall	.+2248   	; 0xa48 <unlock>
	locked = 0;
 180:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 184:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	show_open_lcd();
	open_sound();
 188:	6d d3       	rcall	.+1754   	; 0x864 <show_open_lcd>
 18a:	e1 c3       	rjmp	.+1986   	; 0x94e <open_sound>
 18c:	08 95       	ret

0000018e <close>:
}

void close(){
	lock();
 18e:	74 d4       	rcall	.+2280   	; 0xa78 <lock>
	locked = 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	show_close_lcd();
	close_sound();
 19c:	82 d3       	rcall	.+1796   	; 0x8a2 <show_close_lcd>
 19e:	03 c4       	rjmp	.+2054   	; 0x9a6 <close_sound>
 1a0:	08 95       	ret

000001a2 <init_pad>:
}

void init_pad(){
	for(int i=0; i<4; i++)	pass_input[i] = 0;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <init_pad+0x16>
 1a8:	fc 01       	movw	r30, r24
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	e2 58       	subi	r30, 0x82	; 130
 1b0:	fe 4f       	sbci	r31, 0xFE	; 254
 1b2:	11 82       	std	Z+1, r1	; 0x01
 1b4:	10 82       	st	Z, r1
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	84 30       	cpi	r24, 0x04	; 4
 1ba:	91 05       	cpc	r25, r1
 1bc:	ac f3       	brlt	.-22     	; 0x1a8 <init_pad+0x6>
	ind = 0;
 1be:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <ind+0x1>
 1c2:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <ind>
	input = 12;
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <input+0x1>
 1ce:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <input>
	input_led_off();
 1d2:	8f d3       	rcall	.+1822   	; 0x8f2 <input_led_off>
	change_led_off();
 1d4:	96 c3       	rjmp	.+1836   	; 0x902 <change_led_off>
 1d6:	08 95       	ret

000001d8 <input_mode>:
 1d8:	88 d3       	rcall	.+1808   	; 0x8ea <input_led_on>
}

void input_mode()
{
	input_led_on();
	press_btn = 12;
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <press_btn+0x1>
 1e2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <press_btn>
	press = 0;
 1e6:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <press+0x1>
 1ea:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <press>
	while(1){
		input=KeyScan();
 1ee:	46 d2       	rcall	.+1164   	; 0x67c <KeyScan>
 1f0:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <input+0x1>
 1f4:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <input>
		if(input == 12){
 1f8:	8c 30       	cpi	r24, 0x0C	; 12
 1fa:	91 05       	cpc	r25, r1
 1fc:	09 f0       	breq	.+2      	; 0x200 <input_mode+0x28>
 1fe:	44 c0       	rjmp	.+136    	; 0x288 <input_mode+0xb0>
			if(press){
 200:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <press>
 204:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <press+0x1>
 208:	89 2b       	or	r24, r25
 20a:	99 f1       	breq	.+102    	; 0x272 <input_mode+0x9a>
				if(press_btn == 10){
 20c:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <press_btn>
 210:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <press_btn+0x1>
 214:	2a 30       	cpi	r18, 0x0A	; 10
 216:	31 05       	cpc	r19, r1
					init_pad();
 218:	11 f4       	brne	.+4      	; 0x21e <input_mode+0x46>
 21a:	c3 cf       	rjmp	.-122    	; 0x1a2 <init_pad>
					break;
 21c:	08 95       	ret
				}
				else if(press_btn == 11){
 21e:	2b 30       	cpi	r18, 0x0B	; 11
 220:	31 05       	cpc	r19, r1
					if(check_pass()) {
 222:	41 f4       	brne	.+16     	; 0x234 <input_mode+0x5c>
 224:	57 df       	rcall	.-338    	; 0xd4 <check_pass>
						open();
 226:	89 2b       	or	r24, r25
 228:	11 f0       	breq	.+4      	; 0x22e <input_mode+0x56>
 22a:	a9 df       	rcall	.-174    	; 0x17e <open>
					}
					else {
						error_sound();
 22c:	01 c0       	rjmp	.+2      	; 0x230 <input_mode+0x58>
 22e:	e6 d3       	rcall	.+1996   	; 0x9fc <error_sound>
					}
					init_pad();
 230:	b8 cf       	rjmp	.-144    	; 0x1a2 <init_pad>
 232:	08 95       	ret
					break;
 234:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ind>
				}
				else{
					if(ind == 4 || ind == 5) {
 238:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ind+0x1>
 23c:	ac 01       	movw	r20, r24
 23e:	44 50       	subi	r20, 0x04	; 4
 240:	51 09       	sbc	r21, r1
 242:	42 30       	cpi	r20, 0x02	; 2
 244:	51 05       	cpc	r21, r1
 246:	38 f4       	brcc	.+14     	; 0x256 <input_mode+0x7e>
 248:	85 e0       	ldi	r24, 0x05	; 5
						ind = 5;
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <ind+0x1>
 250:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ind>
 254:	cc cf       	rjmp	.-104    	; 0x1ee <input_mode+0x16>
						continue;
 256:	ac 01       	movw	r20, r24
					}
					pass_input[ind++]=press_btn;
 258:	4f 5f       	subi	r20, 0xFF	; 255
 25a:	5f 4f       	sbci	r21, 0xFF	; 255
 25c:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <ind+0x1>
 260:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <ind>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	fc 01       	movw	r30, r24
 26a:	e2 58       	subi	r30, 0x82	; 130
 26c:	fe 4f       	sbci	r31, 0xFE	; 254
 26e:	31 83       	std	Z+1, r19	; 0x01
 270:	20 83       	st	Z, r18
 272:	8c e0       	ldi	r24, 0x0C	; 12
				}
			}
			press_btn = 12;
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <press_btn+0x1>
 27a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <press_btn>
 27e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <press+0x1>
			press = 0;
 282:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <press>
 286:	b3 cf       	rjmp	.-154    	; 0x1ee <input_mode+0x16>
 288:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <press_btn+0x1>
		}
		else {
			press_btn = input;
 28c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <press_btn>
 290:	81 e0       	ldi	r24, 0x01	; 1
			press = 1;
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <press+0x1>
 298:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <press>
 29c:	a8 cf       	rjmp	.-176    	; 0x1ee <input_mode+0x16>

0000029e <change_mode>:
 29e:	8c e0       	ldi	r24, 0x0C	; 12
		}
	}
}

void change_mode(){
	press_btn = 12;
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <press_btn+0x1>
 2a6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <press_btn>
	press = 0;
 2aa:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <press+0x1>
 2ae:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <press>
	for(int i = 0; i<4; i++){
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0a c0       	rjmp	.+20     	; 0x2cc <change_mode+0x2e>
		pass_input[i]=99;
 2b8:	fc 01       	movw	r30, r24
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	e2 58       	subi	r30, 0x82	; 130
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	23 e6       	ldi	r18, 0x63	; 99
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	31 83       	std	Z+1, r19	; 0x01
 2c8:	20 83       	st	Z, r18
}

void change_mode(){
	press_btn = 12;
	press = 0;
	for(int i = 0; i<4; i++){
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	84 30       	cpi	r24, 0x04	; 4
 2ce:	91 05       	cpc	r25, r1
 2d0:	9c f3       	brlt	.-26     	; 0x2b8 <change_mode+0x1a>
		pass_input[i]=99;
	}
	while(1){
		input=KeyScan();
 2d2:	d4 d1       	rcall	.+936    	; 0x67c <KeyScan>
 2d4:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <input+0x1>
 2d8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <input>
		if(input == 12){
 2dc:	8c 30       	cpi	r24, 0x0C	; 12
 2de:	91 05       	cpc	r25, r1
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <change_mode+0x46>
 2e2:	5b c0       	rjmp	.+182    	; 0x39a <change_mode+0xfc>
			if(press){
 2e4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <press>
 2e8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <press+0x1>
 2ec:	89 2b       	or	r24, r25
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <change_mode+0x54>
 2f0:	49 c0       	rjmp	.+146    	; 0x384 <change_mode+0xe6>
				if(press_btn == 10){
 2f2:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <press_btn>
 2f6:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <press_btn+0x1>
 2fa:	2a 30       	cpi	r18, 0x0A	; 10
 2fc:	31 05       	cpc	r19, r1
					init_pad();
 2fe:	11 f4       	brne	.+4      	; 0x304 <change_mode+0x66>
 300:	50 cf       	rjmp	.-352    	; 0x1a2 <init_pad>
					break;
 302:	08 95       	ret
				}
				else if(press_btn == 11){
 304:	2b 30       	cpi	r18, 0x0B	; 11
 306:	31 05       	cpc	r19, r1
					if(change_pass()) {
 308:	f1 f4       	brne	.+60     	; 0x346 <change_mode+0xa8>
 30a:	12 df       	rcall	.-476    	; 0x130 <change_pass>
 30c:	89 2b       	or	r24, r25
 30e:	89 f4       	brne	.+34     	; 0x332 <change_mode+0x94>
 310:	17 c0       	rjmp	.+46     	; 0x340 <change_mode+0xa2>
						for(int i=0; i<4; i++)
							pass[i] = pass_input[i];
 312:	c9 01       	movw	r24, r18
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	fc 01       	movw	r30, r24
 31a:	e2 58       	subi	r30, 0x82	; 130
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	40 81       	ld	r20, Z
 320:	51 81       	ldd	r21, Z+1	; 0x01
 322:	fc 01       	movw	r30, r24
 324:	ee 5f       	subi	r30, 0xFE	; 254
 326:	fe 4f       	sbci	r31, 0xFE	; 254
 328:	51 83       	std	Z+1, r21	; 0x01
 32a:	40 83       	st	Z, r20
					init_pad();
					break;
				}
				else if(press_btn == 11){
					if(change_pass()) {
						for(int i=0; i<4; i++)
 32c:	2f 5f       	subi	r18, 0xFF	; 255
 32e:	3f 4f       	sbci	r19, 0xFF	; 255
 330:	02 c0       	rjmp	.+4      	; 0x336 <change_mode+0x98>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	24 30       	cpi	r18, 0x04	; 4
 338:	31 05       	cpc	r19, r1
							pass[i] = pass_input[i];
						open_sound();
 33a:	5c f3       	brlt	.-42     	; 0x312 <change_mode+0x74>
 33c:	08 d3       	rcall	.+1552   	; 0x94e <open_sound>
					}
					else {
						error_sound();
 33e:	01 c0       	rjmp	.+2      	; 0x342 <change_mode+0xa4>
 340:	5d d3       	rcall	.+1722   	; 0x9fc <error_sound>
					}
					init_pad();
 342:	2f cf       	rjmp	.-418    	; 0x1a2 <init_pad>
 344:	08 95       	ret
					break;
 346:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ind>
				}
				else {
					if(ind == 4 || ind == 5) {
 34a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ind+0x1>
 34e:	ac 01       	movw	r20, r24
 350:	44 50       	subi	r20, 0x04	; 4
 352:	51 09       	sbc	r21, r1
 354:	42 30       	cpi	r20, 0x02	; 2
 356:	51 05       	cpc	r21, r1
 358:	38 f4       	brcc	.+14     	; 0x368 <change_mode+0xca>
 35a:	85 e0       	ldi	r24, 0x05	; 5
						ind = 5;
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <ind+0x1>
 362:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ind>
 366:	b5 cf       	rjmp	.-150    	; 0x2d2 <change_mode+0x34>
						continue;
 368:	ac 01       	movw	r20, r24
					}
					pass_input[ind++]=press_btn;
 36a:	4f 5f       	subi	r20, 0xFF	; 255
 36c:	5f 4f       	sbci	r21, 0xFF	; 255
 36e:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <ind+0x1>
 372:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <ind>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	fc 01       	movw	r30, r24
 37c:	e2 58       	subi	r30, 0x82	; 130
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	31 83       	std	Z+1, r19	; 0x01
 382:	20 83       	st	Z, r18
 384:	8c e0       	ldi	r24, 0x0C	; 12
				}
			}
			press_btn = 12;
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <press_btn+0x1>
 38c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <press_btn>
 390:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <press+0x1>
			press = 0;
 394:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <press>
 398:	9c cf       	rjmp	.-200    	; 0x2d2 <change_mode+0x34>
 39a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <press_btn+0x1>
		}
		else {
			press_btn = input;
 39e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <press_btn>
 3a2:	81 e0       	ldi	r24, 0x01	; 1
			press = 1;
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <press+0x1>
 3aa:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <press>
 3ae:	91 cf       	rjmp	.-222    	; 0x2d2 <change_mode+0x34>

000003b0 <keyboard_mode>:
 3b0:	0f 93       	push	r16
		}
	}
}

void keyboard_mode(){
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
 3bc:	a5 97       	sbiw	r28, 0x25	; 37
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
	unsigned char text[] = "\r\ninput please\r\n";
 3c8:	81 e1       	ldi	r24, 0x11	; 17
 3ca:	e5 e5       	ldi	r30, 0x55	; 85
 3cc:	f1 e0       	ldi	r31, 0x01	; 1
 3ce:	de 01       	movw	r26, r28
 3d0:	11 96       	adiw	r26, 0x01	; 1
 3d2:	01 90       	ld	r0, Z+
 3d4:	0d 92       	st	X+, r0
 3d6:	8a 95       	dec	r24
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <keyboard_mode+0x22>
	char str[20]="";
 3da:	1b 8a       	std	Y+19, r1	; 0x13
 3dc:	1a 8a       	std	Y+18, r1	; 0x12
 3de:	fe 01       	movw	r30, r28
 3e0:	74 96       	adiw	r30, 0x14	; 20
 3e2:	82 e1       	ldi	r24, 0x12	; 18
 3e4:	df 01       	movw	r26, r30
 3e6:	1d 92       	st	X+, r1
 3e8:	8a 95       	dec	r24
 3ea:	e9 f7       	brne	.-6      	; 0x3e6 <keyboard_mode+0x36>
	unsigned int cnt = 0;
	UCSR0A = 0x00;
 3ec:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18;
 3ee:	88 e1       	ldi	r24, 0x18	; 24
 3f0:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 3f2:	86 e0       	ldi	r24, 0x06	; 6
 3f4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
 3f8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x03;
 3fc:	83 e0       	ldi	r24, 0x03	; 3
 3fe:	89 b9       	out	0x09, r24	; 9
	
	while(1){
		if(!locked){
 400:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 404:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 408:	89 2b       	or	r24, r25
 40a:	71 f5       	brne	.+92     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			sprintf(str,"\r\nUNLOCKED\r\n");
 40c:	8d e0       	ldi	r24, 0x0D	; 13
 40e:	e6 e1       	ldi	r30, 0x16	; 22
 410:	f1 e0       	ldi	r31, 0x01	; 1
 412:	de 01       	movw	r26, r28
 414:	52 96       	adiw	r26, 0x12	; 18
 416:	01 90       	ld	r0, Z+
 418:	0d 92       	st	X+, r0
 41a:	8a 95       	dec	r24
 41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			putch_Str(str);
 41e:	ce 01       	movw	r24, r28
 420:	42 96       	adiw	r24, 0x12	; 18
 422:	49 d3       	rcall	.+1682   	; 0xab6 <putch_Str>
			while(1){
				cnt = getch();
 424:	5a d3       	rcall	.+1716   	; 0xada <getch>
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	8d 30       	cpi	r24, 0x0D	; 13
				if(cnt == 13){
 42a:	91 05       	cpc	r25, r1
 42c:	71 f4       	brne	.+28     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42e:	8b e0       	ldi	r24, 0x0B	; 11
					sprintf(str,"\r\nLOCKED\r\n");
 430:	e3 e2       	ldi	r30, 0x23	; 35
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	de 01       	movw	r26, r28
 436:	52 96       	adiw	r26, 0x12	; 18
 438:	01 90       	ld	r0, Z+
 43a:	0d 92       	st	X+, r0
 43c:	8a 95       	dec	r24
 43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	ce 01       	movw	r24, r28
					putch_Str(str);
 442:	42 96       	adiw	r24, 0x12	; 18
 444:	38 d3       	rcall	.+1648   	; 0xab6 <putch_Str>
					close();
 446:	a3 de       	rcall	.-698    	; 0x18e <close>
 448:	db cf       	rjmp	.-74     	; 0x400 <__LOCK_REGION_LENGTH__>
 44a:	4b 97       	sbiw	r24, 0x1b	; 27
					break;
				}
				else if(cnt == 27){
 44c:	59 f7       	brne	.-42     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 44e:	86 e1       	ldi	r24, 0x16	; 22
					sprintf(str,"\r\nKeyBoard Mode Off\r\n");
 450:	ee e2       	ldi	r30, 0x2E	; 46
 452:	f1 e0       	ldi	r31, 0x01	; 1
 454:	de 01       	movw	r26, r28
 456:	52 96       	adiw	r26, 0x12	; 18
 458:	01 90       	ld	r0, Z+
 45a:	0d 92       	st	X+, r0
 45c:	8a 95       	dec	r24
 45e:	e1 f7       	brne	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
					putch_Str(str);
 460:	ce 01       	movw	r24, r28
 462:	42 96       	adiw	r24, 0x12	; 18
 464:	28 d3       	rcall	.+1616   	; 0xab6 <putch_Str>
					return;
 466:	4b c0       	rjmp	.+150    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
				}
			}
		}
		else{
			putch_Str(text);
 468:	ce 01       	movw	r24, r28
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	24 d3       	rcall	.+1608   	; 0xab6 <putch_Str>
			for(int i=0;i<4; i++){
 46e:	00 e0       	ldi	r16, 0x00	; 0
 470:	10 e0       	ldi	r17, 0x00	; 0
				cnt = getch();
 472:	23 c0       	rjmp	.+70     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 474:	32 d3       	rcall	.+1636   	; 0xada <getch>
 476:	90 e0       	ldi	r25, 0x00	; 0
				if(cnt==27){
 478:	8b 31       	cpi	r24, 0x1B	; 27
 47a:	91 05       	cpc	r25, r1
 47c:	91 f4       	brne	.+36     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
					init_pad();
 47e:	91 de       	rcall	.-734    	; 0x1a2 <init_pad>
 480:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <pad_mode+0x1>
					pad_mode=0;
 484:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <pad_mode>
 488:	86 e1       	ldi	r24, 0x16	; 22
					sprintf(str,"\r\nKeyBoard Mode Off\r\n");
 48a:	ee e2       	ldi	r30, 0x2E	; 46
 48c:	f1 e0       	ldi	r31, 0x01	; 1
 48e:	de 01       	movw	r26, r28
 490:	52 96       	adiw	r26, 0x12	; 18
 492:	01 90       	ld	r0, Z+
 494:	0d 92       	st	X+, r0
 496:	8a 95       	dec	r24
 498:	e1 f7       	brne	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
					putch_Str(str);
 49a:	ce 01       	movw	r24, r28
 49c:	42 96       	adiw	r24, 0x12	; 18
 49e:	0b d3       	rcall	.+1558   	; 0xab6 <putch_Str>
 4a0:	2e c0       	rjmp	.+92     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
					return;
 4a2:	c0 97       	sbiw	r24, 0x30	; 48
				}
				cnt -= '0';
				pass_input[i] = cnt;
 4a4:	f8 01       	movw	r30, r16
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	e2 58       	subi	r30, 0x82	; 130
 4ac:	fe 4f       	sbci	r31, 0xFE	; 254
 4ae:	91 83       	std	Z+1, r25	; 0x01
				putch('*');
 4b0:	80 83       	st	Z, r24
 4b2:	8a e2       	ldi	r24, 0x2A	; 42
				}
			}
		}
		else{
			putch_Str(text);
			for(int i=0;i<4; i++){
 4b4:	f9 d2       	rcall	.+1522   	; 0xaa8 <putch>
 4b6:	0f 5f       	subi	r16, 0xFF	; 255
 4b8:	1f 4f       	sbci	r17, 0xFF	; 255
 4ba:	04 30       	cpi	r16, 0x04	; 4
 4bc:	11 05       	cpc	r17, r1
				cnt -= '0';
				pass_input[i] = cnt;
				putch('*');
			}
			
			if(check_pass())
 4be:	d4 f2       	brlt	.-76     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 4c0:	09 de       	rcall	.-1006   	; 0xd4 <check_pass>
 4c2:	89 2b       	or	r24, r25
 4c4:	71 f0       	breq	.+28     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			{
				open();
 4c6:	5b de       	rcall	.-842    	; 0x17e <open>
				sprintf(str,"\r\nOPEN\r\n");
 4c8:	89 e0       	ldi	r24, 0x09	; 9
 4ca:	e4 e4       	ldi	r30, 0x44	; 68
 4cc:	f1 e0       	ldi	r31, 0x01	; 1
 4ce:	de 01       	movw	r26, r28
 4d0:	52 96       	adiw	r26, 0x12	; 18
 4d2:	01 90       	ld	r0, Z+
 4d4:	0d 92       	st	X+, r0
 4d6:	8a 95       	dec	r24
				putch_Str(str);
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4da:	ce 01       	movw	r24, r28
 4dc:	42 96       	adiw	r24, 0x12	; 18
 4de:	eb d2       	rcall	.+1494   	; 0xab6 <putch_Str>
			}
			else
			{
				error_sound();
 4e0:	8f cf       	rjmp	.-226    	; 0x400 <__LOCK_REGION_LENGTH__>
 4e2:	8c d2       	rcall	.+1304   	; 0x9fc <error_sound>
				sprintf(str,"\r\nERR\r\n");
 4e4:	88 e0       	ldi	r24, 0x08	; 8
 4e6:	ed e4       	ldi	r30, 0x4D	; 77
 4e8:	f1 e0       	ldi	r31, 0x01	; 1
 4ea:	de 01       	movw	r26, r28
 4ec:	52 96       	adiw	r26, 0x12	; 18
 4ee:	01 90       	ld	r0, Z+
 4f0:	0d 92       	st	X+, r0
 4f2:	8a 95       	dec	r24
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
				putch_Str(str);
 4f6:	ce 01       	movw	r24, r28
 4f8:	42 96       	adiw	r24, 0x12	; 18
 4fa:	dd d2       	rcall	.+1466   	; 0xab6 <putch_Str>
 4fc:	81 cf       	rjmp	.-254    	; 0x400 <__LOCK_REGION_LENGTH__>
 4fe:	a5 96       	adiw	r28, 0x25	; 37
			}
		}
	}
}
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	08 95       	ret

00000514 <main>:
 514:	09 d2       	rcall	.+1042   	; 0x928 <piezo_init>
int main(void)
{
	piezo_init();
	motor_init();
 516:	90 d2       	rcall	.+1312   	; 0xa38 <motor_init>
	show_close_lcd();
 518:	c4 d1       	rcall	.+904    	; 0x8a2 <show_close_lcd>
	interrupt_init();
 51a:	d6 dd       	rcall	.-1108   	; 0xc8 <interrupt_init>
	led_init();
 51c:	e2 d1       	rcall	.+964    	; 0x8e2 <led_init>
 51e:	f8 d1       	rcall	.+1008   	; 0x910 <keypad_led_off>
	while(1)
	{	
		keypad_led_off();
 520:	ff d1       	rcall	.+1022   	; 0x920 <keyboard_led_off>
 522:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <pad_mode>
		keyboard_led_off();
 526:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <pad_mode+0x1>
		if(pad_mode == 1) {
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	91 05       	cpc	r25, r1
 52e:	09 f0       	breq	.+2      	; 0x532 <main+0x1e>
 530:	6f c0       	rjmp	.+222    	; 0x610 <main+0xfc>
 532:	eb d1       	rcall	.+982    	; 0x90a <keypad_led_on>
			keypad_led_on();
 534:	a3 d0       	rcall	.+326    	; 0x67c <KeyScan>
 536:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <input+0x1>
			while(1){
				input = KeyScan();
 53a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <input>
 53e:	8c 30       	cpi	r24, 0x0C	; 12
 540:	91 05       	cpc	r25, r1
 542:	61 f5       	brne	.+88     	; 0x59c <main+0x88>
				if(input==12){
 544:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <press>
 548:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <press+0x1>
					if(press){
 54c:	89 2b       	or	r24, r25
 54e:	91 f3       	breq	.-28     	; 0x534 <main+0x20>
 550:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <press_btn>
 554:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <press_btn+0x1>
						if(press_btn == 10){
 558:	8a 30       	cpi	r24, 0x0A	; 10
 55a:	91 05       	cpc	r25, r1
 55c:	01 f3       	breq	.-64     	; 0x51e <main+0xa>
 55e:	8b 30       	cpi	r24, 0x0B	; 11
 560:	91 05       	cpc	r25, r1
 562:	51 f4       	brne	.+20     	; 0x578 <main+0x64>
							pad_mode == 0;
							break;
						}
						else if(press_btn == 11){
 564:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
							if(!locked) close();
 568:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 56c:	89 2b       	or	r24, r25
 56e:	11 f4       	brne	.+4      	; 0x574 <main+0x60>
 570:	0e de       	rcall	.-996    	; 0x18e <close>
 572:	09 c0       	rjmp	.+18     	; 0x586 <main+0x72>
 574:	31 de       	rcall	.-926    	; 0x1d8 <input_mode>
 576:	07 c0       	rjmp	.+14     	; 0x586 <main+0x72>
							else input_mode();
 578:	0d 97       	sbiw	r24, 0x0d	; 13
 57a:	29 f4       	brne	.+10     	; 0x586 <main+0x72>
 57c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <__data_end+0x1>
						}
						else if (press_btn == 13){
 580:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
							change_wait = 0;
 584:	8c de       	rcall	.-744    	; 0x29e <change_mode>
 586:	8c e0       	ldi	r24, 0x0C	; 12
 588:	90 e0       	ldi	r25, 0x00	; 0
							change_mode();
 58a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <press_btn+0x1>
						}
						press_btn = 12;
 58e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <press_btn>
 592:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <press+0x1>
 596:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <press>
						press = 0;
 59a:	cc cf       	rjmp	.-104    	; 0x534 <main+0x20>
 59c:	8a 30       	cpi	r24, 0x0A	; 10
 59e:	91 05       	cpc	r25, r1
 5a0:	39 f5       	brne	.+78     	; 0x5f0 <main+0xdc>
 5a2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <press>
					}
				}
				else {
					if(input == 10){
 5a6:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <press+0x1>
						if(press){
 5aa:	89 2b       	or	r24, r25
 5ac:	a1 f0       	breq	.+40     	; 0x5d6 <main+0xc2>
 5ae:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
 5b2:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
							if(change_wait>40){
 5b6:	89 32       	cpi	r24, 0x29	; 41
 5b8:	91 05       	cpc	r25, r1
 5ba:	44 f0       	brlt	.+16     	; 0x5cc <main+0xb8>
 5bc:	9e d1       	rcall	.+828    	; 0x8fa <change_led_on>
 5be:	8d e0       	ldi	r24, 0x0D	; 13
 5c0:	90 e0       	ldi	r25, 0x00	; 0
								change_led_on();
 5c2:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <press_btn+0x1>
								press_btn = 13;
 5c6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <press_btn>
 5ca:	b4 cf       	rjmp	.-152    	; 0x534 <main+0x20>
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
								continue;
 5d2:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
							}
							change_wait++;
 5d6:	8a e0       	ldi	r24, 0x0A	; 10
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <press_btn+0x1>
						}
						press_btn = 10;
 5de:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <press_btn>
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <press+0x1>
						press = 1;
 5ea:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <press>
 5ee:	a2 cf       	rjmp	.-188    	; 0x534 <main+0x20>
 5f0:	0b 97       	sbiw	r24, 0x0b	; 11
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <main+0xe2>
 5f4:	9f cf       	rjmp	.-194    	; 0x534 <main+0x20>
 5f6:	8b e0       	ldi	r24, 0x0B	; 11
					}
					else if (input == 11){
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <press_btn+0x1>
						press_btn = 11;
 5fe:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <press_btn>
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
						press = 1;
 606:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <press+0x1>
 60a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <press>
 60e:	92 cf       	rjmp	.-220    	; 0x534 <main+0x20>
 610:	02 97       	sbiw	r24, 0x02	; 2
 612:	09 f0       	breq	.+2      	; 0x616 <main+0x102>
					}
				}
			}
		}
		
		else if (pad_mode == 2){
 614:	84 cf       	rjmp	.-248    	; 0x51e <main+0xa>
 616:	80 d1       	rcall	.+768    	; 0x918 <keyboard_led_on>
 618:	cb de       	rcall	.-618    	; 0x3b0 <keyboard_mode>
			keyboard_led_on();
 61a:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <pad_mode+0x1>
			keyboard_mode();
 61e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <pad_mode>
			pad_mode=0;
 622:	7d cf       	rjmp	.-262    	; 0x51e <main+0xa>

00000624 <__vector_5>:
 624:	1f 92       	push	r1
 626:	0f 92       	push	r0
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	0f 92       	push	r0
		}
	}
}
SIGNAL(INT4_vect)
{
 62c:	11 24       	eor	r1, r1
 62e:	8f 93       	push	r24
 630:	9f 93       	push	r25
	cli();
 632:	f8 94       	cli
	pad_mode = 1;
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <pad_mode+0x1>
 63c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <pad_mode>
	sei();
 640:	78 94       	sei
}
 642:	9f 91       	pop	r25
 644:	8f 91       	pop	r24
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <__vector_6>:

SIGNAL(INT5_vect)
{
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	8f 93       	push	r24
 65c:	9f 93       	push	r25
	cli();
 65e:	f8 94       	cli
	pad_mode = 2;
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <pad_mode+0x1>
 668:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <pad_mode>
	sei();
 66c:	78 94       	sei
 66e:	9f 91       	pop	r25
 670:	8f 91       	pop	r24
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <KeyScan>:
#include <avr/io.h>
#include <util/delay.h>

int KeyScan(void)
{
	DDRA = 0xF8;
 67c:	88 ef       	ldi	r24, 0xF8	; 248
 67e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x08;
 680:	88 e0       	ldi	r24, 0x08	; 8
 682:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 684:	82 e4       	ldi	r24, 0x42	; 66
 686:	97 e0       	ldi	r25, 0x07	; 7
 688:	01 97       	sbiw	r24, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <KeyScan+0xc>
	_delay_ms(1);
	if(PINA&0x01) return 1;
 68c:	c8 99       	sbic	0x19, 0	; 25
 68e:	47 c0       	rjmp	.+142    	; 0x71e <KeyScan+0xa2>
	if(PINA&0x02) return 2;
 690:	c9 99       	sbic	0x19, 1	; 25
 692:	48 c0       	rjmp	.+144    	; 0x724 <KeyScan+0xa8>
	if(PINA&0x04) return 3;
 694:	ca 99       	sbic	0x19, 2	; 25
 696:	49 c0       	rjmp	.+146    	; 0x72a <KeyScan+0xae>
	PORTA = 0x00;
 698:	1b ba       	out	0x1b, r1	; 27
 69a:	85 e9       	ldi	r24, 0x95	; 149
 69c:	98 e4       	ldi	r25, 0x48	; 72
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	f1 f7       	brne	.-4      	; 0x69e <KeyScan+0x22>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <KeyScan+0x28>
 6a4:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x10;
 6a6:	80 e1       	ldi	r24, 0x10	; 16
 6a8:	8b bb       	out	0x1b, r24	; 27
 6aa:	82 e4       	ldi	r24, 0x42	; 66
 6ac:	97 e0       	ldi	r25, 0x07	; 7
 6ae:	01 97       	sbiw	r24, 0x01	; 1
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <KeyScan+0x32>
	_delay_ms(1);
	if(PINA&0x01) return 4;
 6b2:	c8 99       	sbic	0x19, 0	; 25
 6b4:	3d c0       	rjmp	.+122    	; 0x730 <KeyScan+0xb4>
	if(PINA&0x02) return 5;
 6b6:	c9 99       	sbic	0x19, 1	; 25
 6b8:	3e c0       	rjmp	.+124    	; 0x736 <KeyScan+0xba>
	if(PINA&0x04) return 6;
 6ba:	ca 99       	sbic	0x19, 2	; 25
 6bc:	3f c0       	rjmp	.+126    	; 0x73c <KeyScan+0xc0>
	PORTA = 0x00;
 6be:	1b ba       	out	0x1b, r1	; 27
 6c0:	85 e9       	ldi	r24, 0x95	; 149
 6c2:	98 e4       	ldi	r25, 0x48	; 72
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <KeyScan+0x48>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <KeyScan+0x4e>
 6ca:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x20;
 6cc:	80 e2       	ldi	r24, 0x20	; 32
 6ce:	8b bb       	out	0x1b, r24	; 27
 6d0:	82 e4       	ldi	r24, 0x42	; 66
 6d2:	97 e0       	ldi	r25, 0x07	; 7
 6d4:	01 97       	sbiw	r24, 0x01	; 1
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <KeyScan+0x58>
	_delay_ms(1);
	if(PINA&0x01) return 7;
 6d8:	c8 99       	sbic	0x19, 0	; 25
 6da:	33 c0       	rjmp	.+102    	; 0x742 <KeyScan+0xc6>
	if(PINA&0x02) return 8;
 6dc:	c9 99       	sbic	0x19, 1	; 25
 6de:	34 c0       	rjmp	.+104    	; 0x748 <KeyScan+0xcc>
	if(PINA&0x04) return 9;
 6e0:	ca 99       	sbic	0x19, 2	; 25
 6e2:	35 c0       	rjmp	.+106    	; 0x74e <KeyScan+0xd2>
	PORTA = 0x00;
 6e4:	1b ba       	out	0x1b, r1	; 27
 6e6:	85 e9       	ldi	r24, 0x95	; 149
 6e8:	98 e4       	ldi	r25, 0x48	; 72
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <KeyScan+0x6e>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <KeyScan+0x74>
 6f0:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x40;
 6f2:	80 e4       	ldi	r24, 0x40	; 64
 6f4:	8b bb       	out	0x1b, r24	; 27
 6f6:	82 e4       	ldi	r24, 0x42	; 66
 6f8:	97 e0       	ldi	r25, 0x07	; 7
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <KeyScan+0x7e>
	_delay_ms(1);
	if(PINA&0x01) return 10;
 6fe:	c8 99       	sbic	0x19, 0	; 25
 700:	29 c0       	rjmp	.+82     	; 0x754 <KeyScan+0xd8>
	if(PINA&0x02) return 0;
 702:	c9 99       	sbic	0x19, 1	; 25
 704:	2a c0       	rjmp	.+84     	; 0x75a <KeyScan+0xde>
	if(PINA&0x04) return 11;
 706:	ca 99       	sbic	0x19, 2	; 25
 708:	2b c0       	rjmp	.+86     	; 0x760 <KeyScan+0xe4>
	PORTA = 0x00;
 70a:	1b ba       	out	0x1b, r1	; 27
 70c:	85 e9       	ldi	r24, 0x95	; 149
 70e:	98 e4       	ldi	r25, 0x48	; 72
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <KeyScan+0x94>
 714:	00 c0       	rjmp	.+0      	; 0x716 <KeyScan+0x9a>
 716:	00 00       	nop
	_delay_ms(10);
	
	return 12;
 718:	8c e0       	ldi	r24, 0x0C	; 12
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	08 95       	ret
int KeyScan(void)
{
	DDRA = 0xF8;
	PORTA = 0x08;
	_delay_ms(1);
	if(PINA&0x01) return 1;
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	08 95       	ret
	if(PINA&0x02) return 2;
 724:	82 e0       	ldi	r24, 0x02	; 2
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	08 95       	ret
	if(PINA&0x04) return 3;
 72a:	83 e0       	ldi	r24, 0x03	; 3
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	08 95       	ret
	PORTA = 0x00;
	_delay_ms(10);
	
	PORTA = 0x10;
	_delay_ms(1);
	if(PINA&0x01) return 4;
 730:	84 e0       	ldi	r24, 0x04	; 4
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	08 95       	ret
	if(PINA&0x02) return 5;
 736:	85 e0       	ldi	r24, 0x05	; 5
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	08 95       	ret
	if(PINA&0x04) return 6;
 73c:	86 e0       	ldi	r24, 0x06	; 6
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	08 95       	ret
	PORTA = 0x00;
	_delay_ms(10);
	
	PORTA = 0x20;
	_delay_ms(1);
	if(PINA&0x01) return 7;
 742:	87 e0       	ldi	r24, 0x07	; 7
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	08 95       	ret
	if(PINA&0x02) return 8;
 748:	88 e0       	ldi	r24, 0x08	; 8
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	08 95       	ret
	if(PINA&0x04) return 9;
 74e:	89 e0       	ldi	r24, 0x09	; 9
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	08 95       	ret
	PORTA = 0x00;
	_delay_ms(10);
	
	PORTA = 0x40;
	_delay_ms(1);
	if(PINA&0x01) return 10;
 754:	8a e0       	ldi	r24, 0x0A	; 10
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	08 95       	ret
	if(PINA&0x02) return 0;
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	08 95       	ret
	if(PINA&0x04) return 11;
 760:	8b e0       	ldi	r24, 0x0B	; 11
 762:	90 e0       	ldi	r25, 0x00	; 0
	PORTA = 0x00;
	_delay_ms(10);
	
	return 12;
 764:	08 95       	ret

00000766 <Lcd_Data>:
 766:	e5 e6       	ldi	r30, 0x65	; 101
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	90 81       	ld	r25, Z
 76c:	91 60       	ori	r25, 0x01	; 1
 76e:	90 83       	st	Z, r25
 770:	90 81       	ld	r25, Z
 772:	9d 7f       	andi	r25, 0xFD	; 253
 774:	90 83       	st	Z, r25
 776:	90 81       	ld	r25, Z
 778:	94 60       	ori	r25, 0x04	; 4
 77a:	90 83       	st	Z, r25
 77c:	9b e7       	ldi	r25, 0x7B	; 123
 77e:	9a 95       	dec	r25
 780:	f1 f7       	brne	.-4      	; 0x77e <Lcd_Data+0x18>
 782:	85 bb       	out	0x15, r24	; 21
 784:	8b e7       	ldi	r24, 0x7B	; 123
 786:	8a 95       	dec	r24
 788:	f1 f7       	brne	.-4      	; 0x786 <Lcd_Data+0x20>
 78a:	80 81       	ld	r24, Z
 78c:	8b 7f       	andi	r24, 0xFB	; 251
 78e:	80 83       	st	Z, r24
 790:	08 95       	ret

00000792 <Lcd_Cmd>:
 792:	e5 e6       	ldi	r30, 0x65	; 101
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	90 81       	ld	r25, Z
 798:	9e 7f       	andi	r25, 0xFE	; 254
 79a:	90 83       	st	Z, r25
 79c:	90 81       	ld	r25, Z
 79e:	9d 7f       	andi	r25, 0xFD	; 253
 7a0:	90 83       	st	Z, r25
 7a2:	90 81       	ld	r25, Z
 7a4:	94 60       	ori	r25, 0x04	; 4
 7a6:	90 83       	st	Z, r25
 7a8:	9b e7       	ldi	r25, 0x7B	; 123
 7aa:	9a 95       	dec	r25
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <Lcd_Cmd+0x18>
 7ae:	85 bb       	out	0x15, r24	; 21
 7b0:	8b e7       	ldi	r24, 0x7B	; 123
 7b2:	8a 95       	dec	r24
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <Lcd_Cmd+0x20>
 7b6:	80 81       	ld	r24, Z
 7b8:	8b 7f       	andi	r24, 0xFB	; 251
 7ba:	80 83       	st	Z, r24
 7bc:	08 95       	ret

000007be <Lcd_CHAR>:
 7be:	d3 df       	rcall	.-90     	; 0x766 <Lcd_Data>
 7c0:	83 e3       	ldi	r24, 0x33	; 51
 7c2:	97 e0       	ldi	r25, 0x07	; 7
 7c4:	01 97       	sbiw	r24, 0x01	; 1
 7c6:	f1 f7       	brne	.-4      	; 0x7c4 <Lcd_CHAR+0x6>
 7c8:	08 95       	ret

000007ca <Lcd_STR>:
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	ec 01       	movw	r28, r24
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <Lcd_STR+0xc>
 7d2:	f5 df       	rcall	.-22     	; 0x7be <Lcd_CHAR>
 7d4:	21 96       	adiw	r28, 0x01	; 1
 7d6:	88 81       	ld	r24, Y
 7d8:	81 11       	cpse	r24, r1
 7da:	fb cf       	rjmp	.-10     	; 0x7d2 <Lcd_STR+0x8>
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	08 95       	ret

000007e2 <Lcd_Pos>:
 7e2:	90 e4       	ldi	r25, 0x40	; 64
 7e4:	89 9f       	mul	r24, r25
 7e6:	60 0d       	add	r22, r0
 7e8:	11 24       	eor	r1, r1
 7ea:	86 2f       	mov	r24, r22
 7ec:	80 68       	ori	r24, 0x80	; 128
 7ee:	d1 df       	rcall	.-94     	; 0x792 <Lcd_Cmd>
 7f0:	8f ef       	ldi	r24, 0xFF	; 255
 7f2:	97 e4       	ldi	r25, 0x47	; 71
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <Lcd_Pos+0x12>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <Lcd_Pos+0x18>
 7fa:	00 00       	nop
 7fc:	08 95       	ret

000007fe <Lcd_Clear>:
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	c8 df       	rcall	.-112    	; 0x792 <Lcd_Cmd>
 802:	8f ef       	ldi	r24, 0xFF	; 255
 804:	97 e4       	ldi	r25, 0x47	; 71
 806:	01 97       	sbiw	r24, 0x01	; 1
 808:	f1 f7       	brne	.-4      	; 0x806 <Lcd_Clear+0x8>
 80a:	00 c0       	rjmp	.+0      	; 0x80c <Lcd_Clear+0xe>
 80c:	00 00       	nop
 80e:	08 95       	ret

00000810 <Lcd_Init>:
	}
}

void Lcd_Init(void)
{
	DDRC = 0xff;
 810:	8f ef       	ldi	r24, 0xFF	; 255
 812:	84 bb       	out	0x14, r24	; 20
	DDRG = 0x0f;
 814:	8f e0       	ldi	r24, 0x0F	; 15
 816:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	Lcd_Cmd(0x38);
 81a:	88 e3       	ldi	r24, 0x38	; 56
 81c:	ba df       	rcall	.-140    	; 0x792 <Lcd_Cmd>
 81e:	86 e6       	ldi	r24, 0x66	; 102
 820:	9e e0       	ldi	r25, 0x0E	; 14
 822:	01 97       	sbiw	r24, 0x01	; 1
 824:	f1 f7       	brne	.-4      	; 0x822 <Lcd_Init+0x12>
 826:	00 00       	nop
	_delay_ms(2);	//명령어를 IR에 쓰고나면 40us 또는 1.64ms을 기다림.
	Lcd_Cmd(0x38);
 828:	88 e3       	ldi	r24, 0x38	; 56
 82a:	b3 df       	rcall	.-154    	; 0x792 <Lcd_Cmd>
 82c:	86 e6       	ldi	r24, 0x66	; 102
 82e:	9e e0       	ldi	r25, 0x0E	; 14
 830:	01 97       	sbiw	r24, 0x01	; 1
 832:	f1 f7       	brne	.-4      	; 0x830 <Lcd_Init+0x20>
	_delay_ms(2);
	Lcd_Cmd(0x38);
 834:	00 00       	nop
 836:	88 e3       	ldi	r24, 0x38	; 56
 838:	ac df       	rcall	.-168    	; 0x792 <Lcd_Cmd>
 83a:	86 e6       	ldi	r24, 0x66	; 102
 83c:	9e e0       	ldi	r25, 0x0E	; 14
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	f1 f7       	brne	.-4      	; 0x83e <Lcd_Init+0x2e>
	_delay_ms(2);
	Lcd_Cmd(0x0c);
 842:	00 00       	nop
 844:	8c e0       	ldi	r24, 0x0C	; 12
 846:	a5 df       	rcall	.-182    	; 0x792 <Lcd_Cmd>
 848:	86 e6       	ldi	r24, 0x66	; 102
 84a:	9e e0       	ldi	r25, 0x0E	; 14
 84c:	01 97       	sbiw	r24, 0x01	; 1
 84e:	f1 f7       	brne	.-4      	; 0x84c <Lcd_Init+0x3c>
	_delay_ms(2);
	Lcd_Cmd(0x06);
 850:	00 00       	nop
 852:	86 e0       	ldi	r24, 0x06	; 6
 854:	9e df       	rcall	.-196    	; 0x792 <Lcd_Cmd>
 856:	86 e6       	ldi	r24, 0x66	; 102
 858:	9e e0       	ldi	r25, 0x0E	; 14
 85a:	01 97       	sbiw	r24, 0x01	; 1
 85c:	f1 f7       	brne	.-4      	; 0x85a <Lcd_Init+0x4a>
	_delay_ms(2);
	Lcd_Clear();
 85e:	00 00       	nop
 860:	ce cf       	rjmp	.-100    	; 0x7fe <Lcd_Clear>
 862:	08 95       	ret

00000864 <show_open_lcd>:
}

void show_open_lcd(){
 864:	cf 93       	push	r28
 866:	df 93       	push	r29
 868:	00 d0       	rcall	.+0      	; 0x86a <show_open_lcd+0x6>
 86a:	00 d0       	rcall	.+0      	; 0x86c <show_open_lcd+0x8>
 86c:	1f 92       	push	r1
 86e:	cd b7       	in	r28, 0x3d	; 61
 870:	de b7       	in	r29, 0x3e	; 62
	Byte str1[] = "OPEN";
 872:	85 e0       	ldi	r24, 0x05	; 5
 874:	e6 e6       	ldi	r30, 0x66	; 102
 876:	f1 e0       	ldi	r31, 0x01	; 1
 878:	de 01       	movw	r26, r28
 87a:	11 96       	adiw	r26, 0x01	; 1
 87c:	01 90       	ld	r0, Z+
 87e:	0d 92       	st	X+, r0
 880:	8a 95       	dec	r24
 882:	e1 f7       	brne	.-8      	; 0x87c <show_open_lcd+0x18>
	
	Lcd_Init();
 884:	c5 df       	rcall	.-118    	; 0x810 <Lcd_Init>
	Lcd_Pos(0, 0);
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	ab df       	rcall	.-170    	; 0x7e2 <Lcd_Pos>
	Lcd_STR(str1);
 88c:	ce 01       	movw	r24, r28
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	9c df       	rcall	.-200    	; 0x7ca <Lcd_STR>
}
 892:	0f 90       	pop	r0
 894:	0f 90       	pop	r0
 896:	0f 90       	pop	r0
 898:	0f 90       	pop	r0
 89a:	0f 90       	pop	r0
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	08 95       	ret

000008a2 <show_close_lcd>:
void show_close_lcd(){
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	00 d0       	rcall	.+0      	; 0x8a8 <show_close_lcd+0x6>
 8a8:	00 d0       	rcall	.+0      	; 0x8aa <show_close_lcd+0x8>
 8aa:	00 d0       	rcall	.+0      	; 0x8ac <show_close_lcd+0xa>
 8ac:	cd b7       	in	r28, 0x3d	; 61
 8ae:	de b7       	in	r29, 0x3e	; 62
	Byte str1[] = "CLOSE";
 8b0:	86 e0       	ldi	r24, 0x06	; 6
 8b2:	eb e6       	ldi	r30, 0x6B	; 107
 8b4:	f1 e0       	ldi	r31, 0x01	; 1
 8b6:	de 01       	movw	r26, r28
 8b8:	11 96       	adiw	r26, 0x01	; 1
 8ba:	01 90       	ld	r0, Z+
 8bc:	0d 92       	st	X+, r0
 8be:	8a 95       	dec	r24
 8c0:	e1 f7       	brne	.-8      	; 0x8ba <show_close_lcd+0x18>
	
	Lcd_Init();
 8c2:	a6 df       	rcall	.-180    	; 0x810 <Lcd_Init>
	Lcd_Pos(0, 0);
 8c4:	60 e0       	ldi	r22, 0x00	; 0
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	8c df       	rcall	.-232    	; 0x7e2 <Lcd_Pos>
	Lcd_STR(str1);
 8ca:	ce 01       	movw	r24, r28
 8cc:	01 96       	adiw	r24, 0x01	; 1
 8ce:	7d df       	rcall	.-262    	; 0x7ca <Lcd_STR>
 8d0:	26 96       	adiw	r28, 0x06	; 6
 8d2:	0f b6       	in	r0, 0x3f	; 63
 8d4:	f8 94       	cli
 8d6:	de bf       	out	0x3e, r29	; 62
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	cd bf       	out	0x3d, r28	; 61
 8dc:	df 91       	pop	r29
 8de:	cf 91       	pop	r28
 8e0:	08 95       	ret

000008e2 <led_init>:
 *  Author: PKNU
 */
 #include <avr/io.h>
 
void led_init(){
	DDRB |= 0x0F;
 8e2:	87 b3       	in	r24, 0x17	; 23
 8e4:	8f 60       	ori	r24, 0x0F	; 15
 8e6:	87 bb       	out	0x17, r24	; 23
 8e8:	08 95       	ret

000008ea <input_led_on>:
}
void input_led_on(){
	PORTB |= 0x04;
 8ea:	88 b3       	in	r24, 0x18	; 24
 8ec:	84 60       	ori	r24, 0x04	; 4
 8ee:	88 bb       	out	0x18, r24	; 24
 8f0:	08 95       	ret

000008f2 <input_led_off>:
}
void input_led_off(){
	PORTB &= ~0x04;
 8f2:	88 b3       	in	r24, 0x18	; 24
 8f4:	8b 7f       	andi	r24, 0xFB	; 251
 8f6:	88 bb       	out	0x18, r24	; 24
 8f8:	08 95       	ret

000008fa <change_led_on>:
}
void change_led_on(){
	PORTB |= 0x08;
 8fa:	88 b3       	in	r24, 0x18	; 24
 8fc:	88 60       	ori	r24, 0x08	; 8
 8fe:	88 bb       	out	0x18, r24	; 24
 900:	08 95       	ret

00000902 <change_led_off>:
}
void change_led_off(){
	PORTB &= ~0x08;
 902:	88 b3       	in	r24, 0x18	; 24
 904:	87 7f       	andi	r24, 0xF7	; 247
 906:	88 bb       	out	0x18, r24	; 24
 908:	08 95       	ret

0000090a <keypad_led_on>:
}
void keypad_led_on(){
	PORTB = 0x01;
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	88 bb       	out	0x18, r24	; 24
 90e:	08 95       	ret

00000910 <keypad_led_off>:
}
void keypad_led_off(){
	PORTB &= ~0x01;
 910:	88 b3       	in	r24, 0x18	; 24
 912:	8e 7f       	andi	r24, 0xFE	; 254
 914:	88 bb       	out	0x18, r24	; 24
 916:	08 95       	ret

00000918 <keyboard_led_on>:
}
void keyboard_led_on(){
	PORTB |= 0x02;
 918:	88 b3       	in	r24, 0x18	; 24
 91a:	82 60       	ori	r24, 0x02	; 2
 91c:	88 bb       	out	0x18, r24	; 24
 91e:	08 95       	ret

00000920 <keyboard_led_off>:
}
void keyboard_led_off(){
	PORTB &= ~0x02;
 920:	88 b3       	in	r24, 0x18	; 24
 922:	8d 7f       	andi	r24, 0xFD	; 253
 924:	88 bb       	out	0x18, r24	; 24
 926:	08 95       	ret

00000928 <piezo_init>:


unsigned int DoReMi[4] = {523, 659, 783, 1046};

void piezo_init(){
	DDRE = 0x08;
 928:	88 e0       	ldi	r24, 0x08	; 8
 92a:	82 b9       	out	0x02, r24	; 2
	TCCR3A = 0x00;
 92c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x19;
 930:	89 e1       	ldi	r24, 0x19	; 25
 932:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00;
 936:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	TCNT3 = 0x0000;
 93a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 93e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	EICRB = 0xFF;
 942:	8f ef       	ldi	r24, 0xFF	; 255
 944:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0xF0;
 946:	80 ef       	ldi	r24, 0xF0	; 240
 948:	89 bf       	out	0x39, r24	; 57
	EIFR = 0xF0;
 94a:	88 bf       	out	0x38, r24	; 56
 94c:	08 95       	ret

0000094e <open_sound>:
}
void open_sound(){
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
	for(int i=0; i<4; i++){
 952:	c0 e0       	ldi	r28, 0x00	; 0
 954:	d0 e0       	ldi	r29, 0x00	; 0
 956:	21 c0       	rjmp	.+66     	; 0x99a <open_sound+0x4c>
		ICR3 = 7372800/DoReMi[i]/2;
 958:	fe 01       	movw	r30, r28
 95a:	ee 0f       	add	r30, r30
 95c:	ff 1f       	adc	r31, r31
 95e:	e6 5f       	subi	r30, 0xF6	; 246
 960:	fe 4f       	sbci	r31, 0xFE	; 254
 962:	20 81       	ld	r18, Z
 964:	31 81       	ldd	r19, Z+1	; 0x01
 966:	40 e0       	ldi	r20, 0x00	; 0
 968:	50 e0       	ldi	r21, 0x00	; 0
 96a:	60 e0       	ldi	r22, 0x00	; 0
 96c:	70 e4       	ldi	r23, 0x40	; 64
 96e:	88 e3       	ldi	r24, 0x38	; 56
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	ba d0       	rcall	.+372    	; 0xae8 <__divmodsi4>
 974:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 978:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR3A = 0x40;
 97c:	eb e8       	ldi	r30, 0x8B	; 139
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	80 e4       	ldi	r24, 0x40	; 64
 982:	80 83       	st	Z, r24
 984:	2f ef       	ldi	r18, 0xFF	; 255
 986:	8f e7       	ldi	r24, 0x7F	; 127
 988:	94 e0       	ldi	r25, 0x04	; 4
 98a:	21 50       	subi	r18, 0x01	; 1
 98c:	80 40       	sbci	r24, 0x00	; 0
 98e:	90 40       	sbci	r25, 0x00	; 0
 990:	e1 f7       	brne	.-8      	; 0x98a <open_sound+0x3c>
 992:	00 c0       	rjmp	.+0      	; 0x994 <open_sound+0x46>
 994:	00 00       	nop
		_delay_ms(200);
		TCCR3A = 0x00;
 996:	10 82       	st	Z, r1
	EICRB = 0xFF;
	EIMSK = 0xF0;
	EIFR = 0xF0;
}
void open_sound(){
	for(int i=0; i<4; i++){
 998:	21 96       	adiw	r28, 0x01	; 1
 99a:	c4 30       	cpi	r28, 0x04	; 4
 99c:	d1 05       	cpc	r29, r1
 99e:	e4 f2       	brlt	.-72     	; 0x958 <open_sound+0xa>
		ICR3 = 7372800/DoReMi[i]/2;
		TCCR3A = 0x40;
		_delay_ms(200);
		TCCR3A = 0x00;
	}
}
 9a0:	df 91       	pop	r29
 9a2:	cf 91       	pop	r28
 9a4:	08 95       	ret

000009a6 <close_sound>:

void close_sound(){
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
	for(int i=3; i>-1; i--){
 9aa:	c3 e0       	ldi	r28, 0x03	; 3
 9ac:	d0 e0       	ldi	r29, 0x00	; 0
 9ae:	21 c0       	rjmp	.+66     	; 0x9f2 <close_sound+0x4c>
		ICR3 = 7372800/DoReMi[i]/2;
 9b0:	fe 01       	movw	r30, r28
 9b2:	ee 0f       	add	r30, r30
 9b4:	ff 1f       	adc	r31, r31
 9b6:	e6 5f       	subi	r30, 0xF6	; 246
 9b8:	fe 4f       	sbci	r31, 0xFE	; 254
 9ba:	20 81       	ld	r18, Z
 9bc:	31 81       	ldd	r19, Z+1	; 0x01
 9be:	40 e0       	ldi	r20, 0x00	; 0
 9c0:	50 e0       	ldi	r21, 0x00	; 0
 9c2:	60 e0       	ldi	r22, 0x00	; 0
 9c4:	70 e4       	ldi	r23, 0x40	; 64
 9c6:	88 e3       	ldi	r24, 0x38	; 56
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	8e d0       	rcall	.+284    	; 0xae8 <__divmodsi4>
 9cc:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 9d0:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR3A = 0x40;
 9d4:	eb e8       	ldi	r30, 0x8B	; 139
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	80 e4       	ldi	r24, 0x40	; 64
 9da:	80 83       	st	Z, r24
 9dc:	2f ef       	ldi	r18, 0xFF	; 255
 9de:	8f e7       	ldi	r24, 0x7F	; 127
 9e0:	94 e0       	ldi	r25, 0x04	; 4
 9e2:	21 50       	subi	r18, 0x01	; 1
 9e4:	80 40       	sbci	r24, 0x00	; 0
 9e6:	90 40       	sbci	r25, 0x00	; 0
 9e8:	e1 f7       	brne	.-8      	; 0x9e2 <close_sound+0x3c>
 9ea:	00 c0       	rjmp	.+0      	; 0x9ec <close_sound+0x46>
 9ec:	00 00       	nop
		_delay_ms(200);
		TCCR3A = 0x00;
 9ee:	10 82       	st	Z, r1
		TCCR3A = 0x00;
	}
}

void close_sound(){
	for(int i=3; i>-1; i--){
 9f0:	21 97       	sbiw	r28, 0x01	; 1
 9f2:	dd 23       	and	r29, r29
 9f4:	ec f6       	brge	.-70     	; 0x9b0 <close_sound+0xa>
		ICR3 = 7372800/DoReMi[i]/2;
		TCCR3A = 0x40;
		_delay_ms(200);
		TCCR3A = 0x00;
	}
}
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	08 95       	ret

000009fc <error_sound>:
void error_sound(){
	ICR3 = 7372800/DoReMi[2]/2;
 9fc:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <DoReMi+0x4>
 a00:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <DoReMi+0x5>
 a04:	40 e0       	ldi	r20, 0x00	; 0
 a06:	50 e0       	ldi	r21, 0x00	; 0
 a08:	60 e0       	ldi	r22, 0x00	; 0
 a0a:	70 e4       	ldi	r23, 0x40	; 64
 a0c:	88 e3       	ldi	r24, 0x38	; 56
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	6b d0       	rcall	.+214    	; 0xae8 <__divmodsi4>
 a12:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 a16:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR3A = 0x40;
 a1a:	eb e8       	ldi	r30, 0x8B	; 139
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	80 e4       	ldi	r24, 0x40	; 64
 a20:	80 83       	st	Z, r24
 a22:	2f ef       	ldi	r18, 0xFF	; 255
 a24:	8f e3       	ldi	r24, 0x3F	; 63
 a26:	9b e0       	ldi	r25, 0x0B	; 11
 a28:	21 50       	subi	r18, 0x01	; 1
 a2a:	80 40       	sbci	r24, 0x00	; 0
 a2c:	90 40       	sbci	r25, 0x00	; 0
 a2e:	e1 f7       	brne	.-8      	; 0xa28 <error_sound+0x2c>
 a30:	00 c0       	rjmp	.+0      	; 0xa32 <error_sound+0x36>
 a32:	00 00       	nop
	_delay_ms(500);
	TCCR3A = 0x00;
 a34:	10 82       	st	Z, r1
 a36:	08 95       	ret

00000a38 <motor_init>:
#include <util/delay.h>

unsigned char Step[4] = {0x10,0x20,0x40,0x80};
	
void motor_init(){
	DDRB = 0x20;
 a38:	80 e2       	ldi	r24, 0x20	; 32
 a3a:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xF0;
 a3c:	80 ef       	ldi	r24, 0xF0	; 240
 a3e:	81 bb       	out	0x11, r24	; 17
	PORTB &= ~0x20;
 a40:	88 b3       	in	r24, 0x18	; 24
 a42:	8f 7d       	andi	r24, 0xDF	; 223
 a44:	88 bb       	out	0x18, r24	; 24
 a46:	08 95       	ret

00000a48 <unlock>:
}
void unlock()
{
	unsigned char i, t = 0;
 a48:	80 e0       	ldi	r24, 0x00	; 0
	for ( i = 0; i < 24 ; i++ )
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	12 c0       	rjmp	.+36     	; 0xa72 <unlock+0x2a>
	{
		PORTD = Step[t];
 a4e:	e8 2f       	mov	r30, r24
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	ee 5e       	subi	r30, 0xEE	; 238
 a54:	fe 4f       	sbci	r31, 0xFE	; 254
 a56:	20 81       	ld	r18, Z
 a58:	22 bb       	out	0x12, r18	; 18
		if(t == 3) t = 0;
 a5a:	83 30       	cpi	r24, 0x03	; 3
 a5c:	11 f0       	breq	.+4      	; 0xa62 <unlock+0x1a>
		else t++;
 a5e:	8f 5f       	subi	r24, 0xFF	; 255
 a60:	01 c0       	rjmp	.+2      	; 0xa64 <unlock+0x1c>
{
	unsigned char i, t = 0;
	for ( i = 0; i < 24 ; i++ )
	{
		PORTD = Step[t];
		if(t == 3) t = 0;
 a62:	80 e0       	ldi	r24, 0x00	; 0
 a64:	ef ef       	ldi	r30, 0xFF	; 255
 a66:	f7 e4       	ldi	r31, 0x47	; 71
 a68:	31 97       	sbiw	r30, 0x01	; 1
 a6a:	f1 f7       	brne	.-4      	; 0xa68 <unlock+0x20>
 a6c:	00 c0       	rjmp	.+0      	; 0xa6e <unlock+0x26>
 a6e:	00 00       	nop
	PORTB &= ~0x20;
}
void unlock()
{
	unsigned char i, t = 0;
	for ( i = 0; i < 24 ; i++ )
 a70:	9f 5f       	subi	r25, 0xFF	; 255
 a72:	98 31       	cpi	r25, 0x18	; 24
 a74:	60 f3       	brcs	.-40     	; 0xa4e <unlock+0x6>
		PORTD = Step[t];
		if(t == 3) t = 0;
		else t++;
		_delay_ms(10);
	}
}
 a76:	08 95       	ret

00000a78 <lock>:

void lock(){
	unsigned char i, t = 3;
 a78:	83 e0       	ldi	r24, 0x03	; 3
	for ( i = 0; i < 24 ; i++ )
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	12 c0       	rjmp	.+36     	; 0xaa2 <lock+0x2a>
	{
		PORTD = Step[t];
 a7e:	e8 2f       	mov	r30, r24
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	ee 5e       	subi	r30, 0xEE	; 238
 a84:	fe 4f       	sbci	r31, 0xFE	; 254
 a86:	20 81       	ld	r18, Z
 a88:	22 bb       	out	0x12, r18	; 18
		if(t == 0) t = 3;
 a8a:	88 23       	and	r24, r24
 a8c:	11 f0       	breq	.+4      	; 0xa92 <lock+0x1a>
		else t--;
 a8e:	81 50       	subi	r24, 0x01	; 1
 a90:	01 c0       	rjmp	.+2      	; 0xa94 <lock+0x1c>
void lock(){
	unsigned char i, t = 3;
	for ( i = 0; i < 24 ; i++ )
	{
		PORTD = Step[t];
		if(t == 0) t = 3;
 a92:	83 e0       	ldi	r24, 0x03	; 3
 a94:	ef ef       	ldi	r30, 0xFF	; 255
 a96:	f7 e4       	ldi	r31, 0x47	; 71
 a98:	31 97       	sbiw	r30, 0x01	; 1
 a9a:	f1 f7       	brne	.-4      	; 0xa98 <lock+0x20>
 a9c:	00 c0       	rjmp	.+0      	; 0xa9e <lock+0x26>
 a9e:	00 00       	nop
	}
}

void lock(){
	unsigned char i, t = 3;
	for ( i = 0; i < 24 ; i++ )
 aa0:	9f 5f       	subi	r25, 0xFF	; 255
 aa2:	98 31       	cpi	r25, 0x18	; 24
 aa4:	60 f3       	brcs	.-40     	; 0xa7e <lock+0x6>
		PORTD = Step[t];
		if(t == 0) t = 3;
		else t--;
		_delay_ms(10);
	}
}
 aa6:	08 95       	ret

00000aa8 <putch>:
 *  Author: PKNU
 */ 
#include <avr/io.h>

void putch(unsigned char data) {
	while((UCSR0A & 0x20) == 0);
 aa8:	5d 9b       	sbis	0x0b, 5	; 11
 aaa:	fe cf       	rjmp	.-4      	; 0xaa8 <putch>
	UDR0 = data;
 aac:	8c b9       	out	0x0c, r24	; 12
	UCSR0A |= 0x20;
 aae:	8b b1       	in	r24, 0x0b	; 11
 ab0:	80 62       	ori	r24, 0x20	; 32
 ab2:	8b b9       	out	0x0b, r24	; 11
 ab4:	08 95       	ret

00000ab6 <putch_Str>:
}
void putch_Str(char *str){
 ab6:	0f 93       	push	r16
 ab8:	1f 93       	push	r17
 aba:	cf 93       	push	r28
 abc:	8c 01       	movw	r16, r24
	unsigned char i=0;
 abe:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i]!='\0')
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <putch_Str+0x10>
	putch(str[i++]);
 ac2:	cf 5f       	subi	r28, 0xFF	; 255
 ac4:	f1 df       	rcall	.-30     	; 0xaa8 <putch>
	UDR0 = data;
	UCSR0A |= 0x20;
}
void putch_Str(char *str){
	unsigned char i=0;
	while(str[i]!='\0')
 ac6:	f8 01       	movw	r30, r16
 ac8:	ec 0f       	add	r30, r28
 aca:	f1 1d       	adc	r31, r1
 acc:	80 81       	ld	r24, Z
 ace:	81 11       	cpse	r24, r1
 ad0:	f8 cf       	rjmp	.-16     	; 0xac2 <putch_Str+0xc>
	putch(str[i++]);
}
 ad2:	cf 91       	pop	r28
 ad4:	1f 91       	pop	r17
 ad6:	0f 91       	pop	r16
 ad8:	08 95       	ret

00000ada <getch>:
unsigned char getch(){
	unsigned char data;
	while((UCSR0A & 0x80)==0);
 ada:	5f 9b       	sbis	0x0b, 7	; 11
 adc:	fe cf       	rjmp	.-4      	; 0xada <getch>
	data=UDR0;
 ade:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
 ae0:	9b b1       	in	r25, 0x0b	; 11
 ae2:	90 68       	ori	r25, 0x80	; 128
 ae4:	9b b9       	out	0x0b, r25	; 11
	return data;
 ae6:	08 95       	ret

00000ae8 <__divmodsi4>:
 ae8:	05 2e       	mov	r0, r21
 aea:	97 fb       	bst	r25, 7
 aec:	16 f4       	brtc	.+4      	; 0xaf2 <__divmodsi4+0xa>
 aee:	00 94       	com	r0
 af0:	0f d0       	rcall	.+30     	; 0xb10 <__negsi2>
 af2:	57 fd       	sbrc	r21, 7
 af4:	05 d0       	rcall	.+10     	; 0xb00 <__divmodsi4_neg2>
 af6:	14 d0       	rcall	.+40     	; 0xb20 <__udivmodsi4>
 af8:	07 fc       	sbrc	r0, 7
 afa:	02 d0       	rcall	.+4      	; 0xb00 <__divmodsi4_neg2>
 afc:	46 f4       	brtc	.+16     	; 0xb0e <__divmodsi4_exit>
 afe:	08 c0       	rjmp	.+16     	; 0xb10 <__negsi2>

00000b00 <__divmodsi4_neg2>:
 b00:	50 95       	com	r21
 b02:	40 95       	com	r20
 b04:	30 95       	com	r19
 b06:	21 95       	neg	r18
 b08:	3f 4f       	sbci	r19, 0xFF	; 255
 b0a:	4f 4f       	sbci	r20, 0xFF	; 255
 b0c:	5f 4f       	sbci	r21, 0xFF	; 255

00000b0e <__divmodsi4_exit>:
 b0e:	08 95       	ret

00000b10 <__negsi2>:
 b10:	90 95       	com	r25
 b12:	80 95       	com	r24
 b14:	70 95       	com	r23
 b16:	61 95       	neg	r22
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	08 95       	ret

00000b20 <__udivmodsi4>:
 b20:	a1 e2       	ldi	r26, 0x21	; 33
 b22:	1a 2e       	mov	r1, r26
 b24:	aa 1b       	sub	r26, r26
 b26:	bb 1b       	sub	r27, r27
 b28:	fd 01       	movw	r30, r26
 b2a:	0d c0       	rjmp	.+26     	; 0xb46 <__udivmodsi4_ep>

00000b2c <__udivmodsi4_loop>:
 b2c:	aa 1f       	adc	r26, r26
 b2e:	bb 1f       	adc	r27, r27
 b30:	ee 1f       	adc	r30, r30
 b32:	ff 1f       	adc	r31, r31
 b34:	a2 17       	cp	r26, r18
 b36:	b3 07       	cpc	r27, r19
 b38:	e4 07       	cpc	r30, r20
 b3a:	f5 07       	cpc	r31, r21
 b3c:	20 f0       	brcs	.+8      	; 0xb46 <__udivmodsi4_ep>
 b3e:	a2 1b       	sub	r26, r18
 b40:	b3 0b       	sbc	r27, r19
 b42:	e4 0b       	sbc	r30, r20
 b44:	f5 0b       	sbc	r31, r21

00000b46 <__udivmodsi4_ep>:
 b46:	66 1f       	adc	r22, r22
 b48:	77 1f       	adc	r23, r23
 b4a:	88 1f       	adc	r24, r24
 b4c:	99 1f       	adc	r25, r25
 b4e:	1a 94       	dec	r1
 b50:	69 f7       	brne	.-38     	; 0xb2c <__udivmodsi4_loop>
 b52:	60 95       	com	r22
 b54:	70 95       	com	r23
 b56:	80 95       	com	r24
 b58:	90 95       	com	r25
 b5a:	9b 01       	movw	r18, r22
 b5c:	ac 01       	movw	r20, r24
 b5e:	bd 01       	movw	r22, r26
 b60:	cf 01       	movw	r24, r30
 b62:	08 95       	ret

00000b64 <_exit>:
 b64:	f8 94       	cli

00000b66 <__stop_program>:
 b66:	ff cf       	rjmp	.-2      	; 0xb66 <__stop_program>
